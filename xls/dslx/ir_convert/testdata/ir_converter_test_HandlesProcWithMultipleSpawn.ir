package test_module

file_number 0 "test_module.x"

chan test_module__s(bits[32], id=0, kind=streaming, ops=receive_only, flow_control=ready_valid, strictness=proven_mutually_exclusive)
chan test_module__s0(bits[32], id=1, kind=streaming, ops=send_receive, flow_control=ready_valid, strictness=proven_mutually_exclusive)
chan test_module__s1(bits[32], id=2, kind=streaming, ops=send_receive, flow_control=ready_valid, strictness=proven_mutually_exclusive)
chan test_module__s0__1(bits[32], id=3, kind=streaming, ops=send_receive, flow_control=ready_valid, strictness=proven_mutually_exclusive)
chan test_module__s0__2(bits[32], id=4, kind=streaming, ops=send_receive, flow_control=ready_valid, strictness=proven_mutually_exclusive)

fn __test_module__C.init() -> bits[32] {
  ret literal.1: bits[32] = literal(value=0, id=1)
}

fn __test_module__B.init() -> bits[32] {
  ret literal.2: bits[32] = literal(value=0, id=2)
}

top proc __test_module__A_0_next(__state: (), init={()}) {
  after_all.6: token = after_all(id=6)
  literal.5: bits[1] = literal(value=1, id=5)
  receive.7: (token, bits[32]) = receive(after_all.6, predicate=literal.5, channel=test_module__s, id=7)
  tok: token = tuple_index(receive.7, index=0, id=9)
  data: bits[32] = tuple_index(receive.7, index=1, id=10)
  __state: () = state_read(state_element=__state, id=4)
  tuple.13: () = tuple(id=13)
  __token: token = literal(value=token, id=3)
  tuple_index.8: token = tuple_index(receive.7, index=0, id=8)
  send.11: token = send(tok, data, predicate=literal.5, channel=test_module__s0, id=11)
  send.12: token = send(tok, data, predicate=literal.5, channel=test_module__s1, id=12)
  next_value.14: () = next_value(param=__state, value=tuple.13, id=14)
}

proc __test_module__A__B_0__C_0_next(__state: bits[32], init={0}) {
  after_all.18: token = after_all(id=18)
  literal.17: bits[1] = literal(value=1, id=17)
  receive.19: (token, bits[32]) = receive(after_all.18, predicate=literal.17, channel=test_module__s0__2, id=19)
  __state: bits[32] = state_read(state_element=__state, id=16)
  data: bits[32] = tuple_index(receive.19, index=1, id=22)
  add.23: bits[32] = add(__state, data, id=23)
  __token: token = literal(value=token, id=15)
  tuple_index.20: token = tuple_index(receive.19, index=0, id=20)
  tok: token = tuple_index(receive.19, index=0, id=21)
  next_value.24: () = next_value(param=__state, value=add.23, id=24)
}

proc __test_module__A__B_0_next(__state: bits[32], init={0}) {
  after_all.28: token = after_all(id=28)
  literal.27: bits[1] = literal(value=1, id=27)
  receive.29: (token, bits[32]) = receive(after_all.28, predicate=literal.27, channel=test_module__s0, id=29)
  __state: bits[32] = state_read(state_element=__state, id=26)
  data: bits[32] = tuple_index(receive.29, index=1, id=32)
  tok: token = tuple_index(receive.29, index=0, id=31)
  add.34: bits[32] = add(__state, data, id=34)
  __token: token = literal(value=token, id=25)
  tuple_index.30: token = tuple_index(receive.29, index=0, id=30)
  send.33: token = send(tok, data, predicate=literal.27, channel=test_module__s0__2, id=33)
  next_value.35: () = next_value(param=__state, value=add.34, id=35)
}

proc __test_module__A__B_1__C_0_next(__state: bits[32], init={0}) {
  after_all.39: token = after_all(id=39)
  literal.38: bits[1] = literal(value=1, id=38)
  receive.40: (token, bits[32]) = receive(after_all.39, predicate=literal.38, channel=test_module__s0__1, id=40)
  __state: bits[32] = state_read(state_element=__state, id=37)
  data: bits[32] = tuple_index(receive.40, index=1, id=43)
  add.44: bits[32] = add(__state, data, id=44)
  __token: token = literal(value=token, id=36)
  tuple_index.41: token = tuple_index(receive.40, index=0, id=41)
  tok: token = tuple_index(receive.40, index=0, id=42)
  next_value.45: () = next_value(param=__state, value=add.44, id=45)
}

proc __test_module__A__B_1_next(__state: bits[32], init={0}) {
  after_all.49: token = after_all(id=49)
  literal.48: bits[1] = literal(value=1, id=48)
  receive.50: (token, bits[32]) = receive(after_all.49, predicate=literal.48, channel=test_module__s1, id=50)
  __state: bits[32] = state_read(state_element=__state, id=47)
  data: bits[32] = tuple_index(receive.50, index=1, id=53)
  tok: token = tuple_index(receive.50, index=0, id=52)
  add.55: bits[32] = add(__state, data, id=55)
  __token: token = literal(value=token, id=46)
  tuple_index.51: token = tuple_index(receive.50, index=0, id=51)
  send.54: token = send(tok, data, predicate=literal.48, channel=test_module__s0__1, id=54)
  next_value.56: () = next_value(param=__state, value=add.55, id=56)
}
