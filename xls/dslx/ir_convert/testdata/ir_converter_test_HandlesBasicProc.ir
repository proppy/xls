package test_module

file_number 0 "test_module.x"

chan test_module__my_chan(bits[32], id=0, kind=streaming, ops=send_receive, flow_control=ready_valid, strictness=proven_mutually_exclusive)

fn __test_module__producer.init() -> bits[32] {
  ret literal.1: bits[32] = literal(value=0, id=1)
}

fn __test_module__consumer.init() -> bits[32] {
  ret literal.2: bits[32] = literal(value=0, id=2)
}

top proc __test_module__main_0_next(__state: (), init={()}) {
  __state: () = state_read(state_element=__state, id=4)
  tuple.6: () = tuple(id=6)
  __token: token = literal(value=token, id=3)
  literal.5: bits[1] = literal(value=1, id=5)
  next_value.7: () = next_value(param=__state, value=tuple.6, id=7)
}

proc __test_module__main__producer_0_next(__state: bits[32], init={0}) {
  __state: bits[32] = state_read(state_element=__state, id=9)
  literal.13: bits[32] = literal(value=1, id=13)
  after_all.11: token = after_all(id=11)
  literal.10: bits[1] = literal(value=1, id=10)
  add.14: bits[32] = add(__state, literal.13, id=14)
  __token: token = literal(value=token, id=8)
  tok: token = send(after_all.11, __state, predicate=literal.10, channel=test_module__my_chan, id=12)
  next_value.15: () = next_value(param=__state, value=add.14, id=15)
}

proc __test_module__main__consumer_0_next(__state: bits[32], init={0}) {
  after_all.19: token = after_all(id=19)
  literal.18: bits[1] = literal(value=1, id=18)
  receive.20: (token, bits[32]) = receive(after_all.19, predicate=literal.18, channel=test_module__my_chan, id=20)
  i: bits[32] = tuple_index(receive.20, index=1, id=23)
  __state: bits[32] = state_read(state_element=__state, id=17)
  add.24: bits[32] = add(i, i, id=24)
  __token: token = literal(value=token, id=16)
  tuple_index.21: token = tuple_index(receive.20, index=0, id=21)
  tok: token = tuple_index(receive.20, index=0, id=22)
  next_value.25: () = next_value(param=__state, value=add.24, id=25)
}
