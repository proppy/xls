package test_module

file_number 0 "test_module.x"

chan test_module__input_c(bits[32], id=0, kind=streaming, ops=send_only, flow_control=ready_valid, strictness=proven_mutually_exclusive)

fn __itok__test_module__trace_and_add(__token: token id=1, __activated: bits[1] id=2, x: bits[32] id=3, y: bits[32][2] id=4) -> (token, bits[32]) {
  literal.5: bits[32] = literal(value=0, id=5)
  literal.7: bits[32] = literal(value=1, id=7)
  literal.10: bits[8] = literal(value=1, id=10)
  array_index.6: bits[32] = array_index(y, indices=[literal.5], id=6)
  array_index.8: bits[32] = array_index(y, indices=[literal.7], id=8)
  array_index.11: bits[32] = array_index(y, indices=[literal.10], id=11)
  literal.13: bits[8] = literal(value=0, id=13)
  trace.9: token = trace(__token, __activated, format="x = {}, y = [{}, {}]", data_operands=[x, array_index.6, array_index.8], id=9)
  add.12: bits[32] = add(x, array_index.11, id=12)
  array_index.14: bits[32] = array_index(y, indices=[literal.13], id=14)
  after_all.16: token = after_all(trace.9, id=16)
  add.15: bits[32] = add(add.12, array_index.14, id=15)
  ret tuple.17: (token, bits[32]) = tuple(after_all.16, add.15, id=17)
}

fn __itok__test_module__assert_trace_and_add(__token: token id=18, __activated: bits[1] id=19, x: bits[32] id=20) -> (token, bits[32]) {
  literal.21: bits[32] = literal(value=5, id=21)
  eq.22: bits[1] = eq(x, literal.21, id=22)
  literal.31: bits[32] = literal(value=4, id=31)
  literal.32: bits[32] = literal(value=6, id=32)
  and.25: bits[1] = and(__activated, eq.22, id=25)
  array.33: bits[32][2] = array(literal.31, literal.32, id=33)
  not.26: bits[1] = not(and.25, id=26)
  invoke.34: (token, bits[32]) = invoke(__token, __activated, x, array.33, to_apply=__itok__test_module__trace_and_add, id=34)
  literal.24: bits[32] = literal(value=0, id=24)
  assert.27: token = assert(__token, not.26, message="Assertion failure via fail! @ test_module.x:8:28-8:49", label="x_is_now_5", id=27)
  tuple_index.35: token = tuple_index(invoke.34, index=0, id=35)
  literal.29: bits[32] = literal(value=0, id=29)
  identity.28: bits[32] = identity(literal.24, id=28)
  after_all.37: token = after_all(assert.27, tuple_index.35, id=37)
  tuple_index.36: bits[32] = tuple_index(invoke.34, index=1, id=36)
  literal.23: bits[8][10] = literal(value=[120, 95, 105, 115, 95, 110, 111, 119, 95, 53], id=23)
  sel.30: bits[32] = sel(eq.22, cases=[literal.29, identity.28], id=30)
  ret tuple.38: (token, bits[32]) = tuple(after_all.37, tuple_index.36, id=38)
}

top proc __test_module__main_0_next(__state: bits[32], init={0}) {
  __token: token = literal(value=token, id=39)
  literal.41: bits[1] = literal(value=1, id=41)
  __state: bits[32] = state_read(state_element=__state, id=40)
  invoke.44: (token, bits[32]) = invoke(__token, literal.41, __state, to_apply=__itok__test_module__assert_trace_and_add, id=44)
  after_all.42: token = after_all(id=42)
  tuple_index.46: bits[32] = tuple_index(invoke.44, index=1, id=46)
  tok: token = send(after_all.42, __state, predicate=literal.41, channel=test_module__input_c, id=43)
  tuple_index.45: token = tuple_index(invoke.44, index=0, id=45)
  next_value.47: () = next_value(param=__state, value=tuple_index.46, id=47)
}
