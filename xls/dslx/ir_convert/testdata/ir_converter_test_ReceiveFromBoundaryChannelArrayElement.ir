package test_module

file_number 0 "test_module.x"

chan test_module__some_chan_array__0(bits[32], id=0, kind=streaming, ops=receive_only, flow_control=ready_valid, strictness=proven_mutually_exclusive)
chan test_module__some_chan_array__1(bits[32], id=1, kind=streaming, ops=receive_only, flow_control=ready_valid, strictness=proven_mutually_exclusive)

top proc __test_module__SomeProc_0_next(__state: (), init={()}) {
  some_tok: token = literal(value=token, id=4)
  literal.3: bits[1] = literal(value=1, id=3)
  receive.5: (token, bits[32]) = receive(some_tok, predicate=literal.3, channel=test_module__some_chan_array__0, id=5)
  receive.9: (token, bits[32]) = receive(some_tok, predicate=literal.3, channel=test_module__some_chan_array__1, id=9)
  tok_0: token = tuple_index(receive.5, index=0, id=7)
  tok_1: token = tuple_index(receive.9, index=0, id=11)
  __state: () = state_read(state_element=__state, id=2)
  tuple.14: () = tuple(id=14)
  __token: token = literal(value=token, id=1)
  tuple_index.6: token = tuple_index(receive.5, index=0, id=6)
  tuple_index.8: bits[32] = tuple_index(receive.5, index=1, id=8)
  tuple_index.10: token = tuple_index(receive.9, index=0, id=10)
  tuple_index.12: bits[32] = tuple_index(receive.9, index=1, id=12)
  after_all.13: token = after_all(tok_0, tok_1, id=13)
  next_value.15: () = next_value(param=__state, value=tuple.14, id=15)
}
