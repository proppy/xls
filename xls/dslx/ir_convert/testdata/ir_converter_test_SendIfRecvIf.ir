package test_module

file_number 0 "test_module.x"

chan test_module__my_chan(bits[32], id=0, kind=streaming, ops=send_receive, flow_control=ready_valid, strictness=proven_mutually_exclusive)

fn __test_module__producer.init() -> bits[1] {
  ret literal.1: bits[1] = literal(value=0, id=1)
}

fn __test_module__consumer.init() -> bits[1] {
  ret literal.2: bits[1] = literal(value=0, id=2)
}

top proc __test_module__main_0_next(__state: (), init={()}) {
  __state: () = state_read(state_element=__state, id=4)
  tuple.6: () = tuple(id=6)
  __token: token = literal(value=token, id=3)
  literal.5: bits[1] = literal(value=1, id=5)
  next_value.7: () = next_value(param=__state, value=tuple.6, id=7)
}

proc __test_module__main__producer_0_next(__state: bits[1], init={0}) {
  __state: bits[1] = state_read(state_element=__state, id=9)
  literal.10: bits[1] = literal(value=1, id=10)
  after_all.11: token = after_all(id=11)
  zero_ext.12: bits[32] = zero_ext(__state, new_bit_count=32, id=12)
  and.13: bits[1] = and(literal.10, __state, id=13)
  not.15: bits[1] = not(__state, id=15)
  __token: token = literal(value=token, id=8)
  send.14: token = send(after_all.11, zero_ext.12, predicate=and.13, channel=test_module__my_chan, id=14)
  next_value.16: () = next_value(param=__state, value=not.15, id=16)
}

proc __test_module__main__consumer_0_next(__state: bits[1], init={0}) {
  literal.19: bits[1] = literal(value=1, id=19)
  __state: bits[1] = state_read(state_element=__state, id=18)
  after_all.20: token = after_all(id=20)
  and.22: bits[1] = and(literal.19, __state, id=22)
  receive.23: (token, bits[32]) = receive(after_all.20, predicate=and.22, channel=test_module__my_chan, id=23)
  literal.21: bits[32] = literal(value=42, id=21)
  tuple_index.25: bits[32] = tuple_index(receive.23, index=1, id=25)
  tuple_index.24: token = tuple_index(receive.23, index=0, id=24)
  sel.26: bits[32] = sel(__state, cases=[literal.21, tuple_index.25], id=26)
  tuple.27: (token, bits[32]) = tuple(tuple_index.24, sel.26, id=27)
  not.30: bits[1] = not(__state, id=30)
  __token: token = literal(value=token, id=17)
  tuple_index.28: token = tuple_index(tuple.27, index=0, id=28)
  foo: bits[32] = tuple_index(tuple.27, index=1, id=29)
  next_value.31: () = next_value(param=__state, value=not.30, id=31)
}
