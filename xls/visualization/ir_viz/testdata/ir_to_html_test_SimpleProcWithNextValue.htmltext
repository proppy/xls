package test

chan in(bits[32], id=0, kind=streaming, ops=receive_only, flow_control=ready_valid, strictness=proven_mutually_exclusive)
chan out(bits[32], id=1, kind=streaming, ops=send_only, flow_control=ready_valid, strictness=proven_mutually_exclusive)

<span id="ir-function-f0" class="ir-function">top proc <span id="ir-function-def-f0" class="ir-function-identifier" data-identifier="f0">the_proc</span>(x: bits[32], y: bits[64], init={0, 42}) {
  <span id="ir-node-def-f0_15" class="ir-node-identifier ir-node-identifier-f0_15" data-node-id="f0_15" data-function-id="f0">tkn</span>: token = literal(value=token, id=15)
  <span id="ir-node-def-f0_16" class="ir-node-identifier ir-node-identifier-f0_16" data-node-id="f0_16" data-function-id="f0">rcv</span>: (token, bits[32]) = receive(<span class="ir-node-identifier ir-node-identifier-f0_15 ir-edge-f0_15-f0_16" data-node-id="f0_15" data-function-id="f0">tkn</span>, channel=in, id=16)
  <span id="ir-node-def-f0_13" class="ir-node-identifier ir-node-identifier-f0_13" data-node-id="f0_13" data-function-id="f0">x</span>: bits[32] = state_read(state_element=x, id=13)
  <span id="ir-node-def-f0_18" class="ir-node-identifier ir-node-identifier-f0_18" data-node-id="f0_18" data-function-id="f0">rcv_data</span>: bits[32] = tuple_index(<span class="ir-node-identifier ir-node-identifier-f0_16 ir-edge-f0_16-f0_18" data-node-id="f0_16" data-function-id="f0">rcv</span>, index=1, id=18)
  <span id="ir-node-def-f0_14" class="ir-node-identifier ir-node-identifier-f0_14" data-node-id="f0_14" data-function-id="f0">y</span>: bits[64] = state_read(state_element=y, id=14)
  <span id="ir-node-def-f0_17" class="ir-node-identifier ir-node-identifier-f0_17" data-node-id="f0_17" data-function-id="f0">rcv_token</span>: token = tuple_index(<span class="ir-node-identifier ir-node-identifier-f0_16 ir-edge-f0_16-f0_17" data-node-id="f0_16" data-function-id="f0">rcv</span>, index=0, id=17)
  <span id="ir-node-def-f0_19" class="ir-node-identifier ir-node-identifier-f0_19" data-node-id="f0_19" data-function-id="f0">next_x</span>: bits[32] = add(<span class="ir-node-identifier ir-node-identifier-f0_13 ir-edge-f0_13-f0_19" data-node-id="f0_13" data-function-id="f0">x</span>, <span class="ir-node-identifier ir-node-identifier-f0_18 ir-edge-f0_18-f0_19" data-node-id="f0_18" data-function-id="f0">rcv_data</span>, id=19)
  <span id="ir-node-def-f0_22" class="ir-node-identifier ir-node-identifier-f0_22" data-node-id="f0_22" data-function-id="f0">one</span>: bits[1] = literal(value=1, id=22)
  <span id="ir-node-def-f0_20" class="ir-node-identifier ir-node-identifier-f0_20" data-node-id="f0_20" data-function-id="f0">not_y</span>: bits[64] = not(<span class="ir-node-identifier ir-node-identifier-f0_14 ir-edge-f0_14-f0_20" data-node-id="f0_14" data-function-id="f0">y</span>, id=20)
  <span id="ir-node-def-f0_21" class="ir-node-identifier ir-node-identifier-f0_21" data-node-id="f0_21" data-function-id="f0">send</span>: token = send(<span class="ir-node-identifier ir-node-identifier-f0_17 ir-edge-f0_17-f0_21" data-node-id="f0_17" data-function-id="f0">rcv_token</span>, <span class="ir-node-identifier ir-node-identifier-f0_19 ir-edge-f0_19-f0_21" data-node-id="f0_19" data-function-id="f0">next_x</span>, channel=out, id=21)
  <span id="ir-node-def-f0_23" class="ir-node-identifier ir-node-identifier-f0_23" data-node-id="f0_23" data-function-id="f0">next_value_x</span>: () = next_value(param=<span class="ir-node-identifier ir-node-identifier-f0_13 ir-edge-f0_13-f0_23" data-node-id="f0_13" data-function-id="f0">x</span>, value=<span class="ir-node-identifier ir-node-identifier-f0_19 ir-edge-f0_19-f0_23" data-node-id="f0_19" data-function-id="f0">next_x</span>, predicate=<span class="ir-node-identifier ir-node-identifier-f0_22 ir-edge-f0_22-f0_23" data-node-id="f0_22" data-function-id="f0">one</span>, id=23)
  <span id="ir-node-def-f0_24" class="ir-node-identifier ir-node-identifier-f0_24" data-node-id="f0_24" data-function-id="f0">next_value_y</span>: () = next_value(param=<span class="ir-node-identifier ir-node-identifier-f0_14 ir-edge-f0_14-f0_24" data-node-id="f0_14" data-function-id="f0">y</span>, value=<span class="ir-node-identifier ir-node-identifier-f0_20 ir-edge-f0_20-f0_24" data-node-id="f0_20" data-function-id="f0">not_y</span>, predicate=<span class="ir-node-identifier ir-node-identifier-f0_22 ir-edge-f0_22-f0_24" data-node-id="f0_22" data-function-id="f0">one</span>, id=24)
}</span>
