block my_block(clk: clock, x: bits[32], y: bits[32], result: bits[32]) {
  reg p1_x(bits[32])
  reg p1_y(bits[32])
  reg p2_add(bits[32])
  reg p2_y(bits[32])
  reg p3_sub(bits[32])
  x: bits[32] = input_port(name=x, id=1)
  y: bits[32] = input_port(name=y, id=2)
  p1_x_write: () = register_write(x, register=p1_x, id=3)
  p1_y_write: () = register_write(y, register=p1_y, id=5)
  p1_x: bits[32] = register_read(register=p1_x, id=4)
  p1_y: bits[32] = register_read(register=p1_y, id=6)
  p1_add: bits[32] = add(p1_x, p1_y, id=7)
  p2_add_write: () = register_write(p1_add, register=p2_add, id=8)
  p2_y_write: () = register_write(p1_y, register=p2_y, id=10)
  p2_add: bits[32] = register_read(register=p2_add, id=9)
  p2_y: bits[32] = register_read(register=p2_y, id=11)
  p2_sub: bits[32] = sub(p2_add, p2_y, id=12)
  p3_sub_write: () = register_write(p2_sub, register=p3_sub, id=13)
  p3_sub: bits[32] = register_read(register=p3_sub, id=14)
  p3_zero: bits[32] = literal(value=0, id=15)
  p3_mul: bits[32] = umul(p3_sub, p3_zero, id=16)
  result: () = output_port(p3_mul, name=result, id=17)
}
