package test

proc my_proc<in_ch: bits[32] in kind=single_value, out_ch: bits[32] out kind=streaming strictness=proven_mutually_exclusive>(my_token: token, my_state: bits[32], init={token, 42}) {
  my_token: token = state_read(state_element=my_token, id=9)
  my_state: bits[32] = state_read(state_element=my_state, id=10)
  send.1: token = send(my_token, my_state, channel=out_ch, id=1)
  literal.2: bits[1] = literal(value=1, id=2)
  receive.3: (token, bits[32]) = receive(send.1, predicate=literal.2, channel=in_ch, id=3)
  tuple_index.4: token = tuple_index(receive.3, index=0, id=4)
  next_value.15: () = next_value(param=my_token, value=tuple_index.4, id=15)
  next_value.16: () = next_value(param=my_state, value=my_state, id=16)
}

proc other_proc<>(my_token: token, my_state: bits[32], init={token, 42}) {
  chan ch_a(bits[32], id=0, kind=single_value, ops=send_receive)
  chan ch_b(bits[32], id=1, kind=streaming, ops=send_receive, flow_control=none, strictness=proven_mutually_exclusive)
  proc_instantiation foo(ch_a, ch_b, proc=my_proc)
  my_token: token = state_read(state_element=my_token, id=11)
  my_state: bits[32] = state_read(state_element=my_state, id=12)
  next_value.19: () = next_value(param=my_token, value=my_token, id=19)
  next_value.20: () = next_value(param=my_state, value=my_state, id=20)
}
